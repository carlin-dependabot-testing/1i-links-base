name: Pull Request Validation test

on:
  pull_request:
    branches: main
    paths:
      - "apps/app/**"
  workflow_dispatch:

permissions:
  contents: read
  actions: read

concurrency:
  group: "pr-${{ github.ref }}"
  cancel-in-progress: true

env:
  HUSKY: 0
  NEXT_TELEMETRY_DISABLED: 1
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
  CI_WORKERS: 2

jobs:
  validate:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore(deps)') && !contains(github.event.head_commit.message, 'skip ci')"
    name: Validate PR
    timeout-minutes: 8

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup project dependencies
        uses: ./.github/workflows/setup-node
        id: setup-node

      - name: Process Template JSON Files
        run: |
          mkdir -p apps/app/public/data
          for template in apps/app/public/templates/*.template.json; do
            if [ -f "$template" ]; then
              filename=$(basename "$template" .template.json)
              cp "$template" "apps/app/public/data/${filename}.json"
            fi
          done

      - name: Set Environment Variables
        env:
          NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL }}
        run: |
          echo "NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL" > .env.local

      - name: Run Checks
        run: |
          echo "Running TypeScript checks..."
          pnpm run tsc
          echo "Running Linter..."
          pnpm run lint
          echo "Running Tests..."
          pnpm run test

      - name: Build Check
        run: pnpm build
        env:
          NEXT_TELEMETRY_DISABLED: 1

  test-e2e:
    name: E2E Tests
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup project dependencies
        uses: ./.github/workflows/setup-node

      - name: Store Playwright's Version
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(pnpm ls @playwright/test | grep @playwright | sed 's/.*@//')
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV

      - name: Cache Playwright Browsers
        id: cache-playwright-browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}

      - name: Install Playwright
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        working-directory: apps/e2e
        run: npm exec playwright install --with-deps

      - name: Run Playwright tests
        working-directory: apps/e2e
        run: pnpm exec playwright test
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 2

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: apps/e2e/playwright-report/
          retention-days: 3
